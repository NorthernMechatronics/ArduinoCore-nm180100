# Northern Mechatronics ARM Core Platform.
# ------------------------------
#
# For more info:
# https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5-3rd-party-Hardware-specification

name=Northern Mechatronics Arduino Boards
version=[VERSION]

##################################
#
# paths
#
##################################
cores.path   = {runtime.platform.path}/cores
nmsdk2.path  = {runtime.platform.path}/cores/nmsdk2
cmsis.path   = {runtime.platform.path}/cores/nmsdk2/cmsis
hal.path     = {runtime.platform.path}/cores/nmsdk2/hal
rtos.path    = {runtime.platform.path}/cores/nmsdk2/rtos/FreeRTOS
lorawan.path = {runtime.platform.path}/cores/nmsdk2/comms/lorawan/src
target.path  = {runtime.platform.path}/cores/nmsdk2/targets/nm180100
libraries.path  = {runtime.platform.path}/libraries
variant.path = {build.variant.path}

##################################
#
# defines
#
##################################
defines.arduino = -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} -DARDUINO_ARCH_MBED
defines.lorawan = -DSOFT_SE -DCONTEXT_MANAGEMENT_ENABLED
defines.variant = 
defines.extra   = -DAM_PART_APOLLO3 -DAM_PACKAGE_BGA -DPART_apollo3
defines.all     = {defines.variant} {defines.arduino} {defines.lorawan} {defines.extra}

defines.preproc = {defines.all}
defines.asm     = {defines.all}
defines.c       = {defines.all}
defines.cxx     = {defines.all}
defines.ld      = {defines.all}

##################################
#
# includes
#
##################################
includes.core    = "-I{cores.path}/arduino/api" "-I{cores.path}/target" "-I{cores.path}/target/api" 
includes.cmsis   = "-I{cmsis.path}/CMSIS_5/CMSIS/Core/Include" "-I{cmsis.path}/CMSIS-DSP/Include" "-I{cmsis.path}/CMSIS-DSP/Include/dsp" "-I{cmsis.path}/CMSIS-NN/Include"
includes.hal     = "-I{hal.path}/ambiq/CMSIS/AmbiqMicro/Include" "-I{hal.path}/ambiq/mcu/apollo3" "-I{hal.path}/ambiq/mcu/apollo3/hal" "-I{hal.path}/ambiq/mcu/apollo3/regs" "-I{hal.path}/ambiq/utils"
includes.rtos    = "-I{rtos.path}/kernel/include" "-I{target.path}/rtos/FreeRTOS" "-I{target.path}/rtos/FreeRTOS/portable"
includes.libraries = "-I{libraries.path}/Servo/src" "-I{libraries.path}/SPI/src" "-I{libraries.path}/Wire/src" "-I{libraries.path}/Button/src"
includes.variant = "-I{build.variant.path}"
includes.lorawan = "-I{lorawan.path}/boards" "-I{lorawan.path}/mac" "-I{lorawan.path}/mac/region" "-I{lorawan.path}/radio" "-I{lorawan.path}/radio/sx126x" "-I{lorawan.path}/system" "-I{target.path}/comms/lorawan/src/apps/LoRaMac/common" "-I{target.path}/comms/lorawan/src/apps/LoRaMac/common/LmHandler" "-I{target.path}/comms/lorawan/src/apps/LoRaMac/common/LmHandler/packages" "-I{target.path}/comms/lorawan/src/apps/LoRaMac/common/boards/nm180100" "-I{libraries.path}/LoRaWAN/src" "-I{libraries.path}/LoRaWAN/src/soft-se"
includes.all     = {includes} {includes.core} {includes.cmsis} {includes.hal} {includes.rtos} {includes.libraries} {includes.variant} {includes.lorawan}

##################################
#
# libraries
#
##################################
libs.core    = -Wl,-L{build.core} -Wl,--whole-archive "{archive_file_path}" -Wl,--no-whole-archive
libs.cmsis   = -Wl,-L{target.path}/cmsis/lib -Wl,--whole-archive -Wl,-lcmsis-nn -Wl,-lCMSISDSP -Wl,--no-whole-archive
libs.variant = -Wl,-L{variant.path}/lib -Wl,--whole-archive -Wl,-larduino -Wl,--no-whole-archive
libs.all     = {libs.cmsis} {libs.core} {libs.variant}

##################################
#
# warnings
#
##################################
compiler.warning_flags         =
compiler.warning_flags.none    =
compiler.warning_flags.default = -Werror -Wdouble-promotion -Wstrict-aliasing -Wswitch -Wimplicit-function-declaration
compiler.warning_flags.more    = {compiler.warning_flags.default}
compiler.warning_flags.all     = {compiler.warning_flags.default}

##################################
#
# extra flags (can be overridden in platform.local.txt)
#
##################################
compiler.preproc.extra_flags =
compiler.asm.extra_flags     =
compiler.c.extra_flags       =
compiler.cxx.extra_flags     =
compiler.ld.extra_flags      =
compiler.ar.extra_flags      =
compiler.axf2bin.extra_flags =
compiler.axf2hex.extra_flags =
compiler.common_flags        = -g -mthumb -fdata-sections -ffunction-sections -fomit-frame-pointer -mcpu={build.mcu} -mfpu={build.fpu} -mfloat-abi={build.fabi}

##################################
#
# flags
#
##################################
compiler.preproc.flags = {compiler.cxx.flags} -w -x c++ -E -CC {compiler.preproc.extra_flags}

compiler.asm.flags     = {compiler.common_flags} {compiler.asm.extra_flags} -c

compiler.c.flags       = {compiler.common_flags} {compiler.c.extra_flags} -c -std=c11

compiler.cxx.flags     = {compiler.common_flags} {compiler.cxx.extra_flags} -c -std=c++17 -fpermissive -fno-exceptions -fno-rtti

compiler.ld.flags      = {compiler.common_flags} {compiler.ld.extra_flags} --specs=nosys.specs --specs=nano.specs -Wl,--gc-sections -Wl,--start-group -lm -lc -lgcc -Wl,--end-group

compiler.ar.flags      = rcsP {compiler.ar.extra_flags}

compiler.axf2bin.flags = {compiler.axf2bin.extra_flags} -O binary

compiler.axf2hex.flags = {compiler.axf2hex.extra_flags} -O ihex

##################################
#
# compiler information
#
##################################
#compiler.path        = {runtime.tools.arm-none-eabi-gcc-9-2020-q4-update.path}/bin/
compiler.path        =
compiler.prefix      = arm-none-eabi-
compiler.cpp.cmd     = {compiler.prefix}cpp
compiler.gcc.cmd     = {compiler.prefix}gcc
compiler.gxx.cmd     = {compiler.prefix}g++
compiler.ar.cmd      = {compiler.prefix}ar
compiler.objcopy.cmd = {compiler.prefix}objcopy
compiler.size.cmd    = {compiler.prefix}size
compiler.gdb.cmd     = {compiler.prefix}gdb

##################################
#
# arduino recipes
#
##################################
recipe.preproc.macros = "{compiler.path}{compiler.gxx.cmd}" {compiler.preproc.flags} {defines.preproc} {includes.all} "{source_file}" -o "{preprocessed_file_path}"

recipe.S.o.pattern    = "{compiler.path}{compiler.gcc.cmd}" {compiler.asm.flags} {defines.asm} {includes.all} "{source_file}" -o "{object_file}"

recipe.c.o.pattern    = "{compiler.path}{compiler.gcc.cmd}" {compiler.c.flags}   {defines.c}   {includes.all} "{source_file}" -o "{object_file}"
 
recipe.cpp.o.pattern  = "{compiler.path}{compiler.gxx.cmd}" {compiler.cxx.flags} {defines.cxx} {includes.all} "{source_file}" -o "{object_file}"

recipe.ar.pattern     = "{compiler.path}{compiler.ar.cmd}"  {compiler.ar.flags} "{archive_file_path}" "{object_file}"

recipe.c.combine.pattern   = "{compiler.path}{compiler.gxx.cmd}" "-T{build.ldscript}" "-Wl,-Map,{build.path}/{build.project_name}.map" -o "{build.path}/{build.project_name}.axf" {object_files} {libs.all} {compiler.ld.flags} {defines.ld}

recipe.objcopy.bin.pattern = "{compiler.path}{compiler.objcopy.cmd}" {compiler.axf2bin.flags} "{build.path}/{build.project_name}.axf" "{build.path}/{build.project_name}.bin"

recipe.objcopy.hex.pattern = "{compiler.path}{compiler.objcopy.cmd}" {compiler.axf2hex.flags} "{build.path}/{build.project_name}.axf" "{build.path}/{build.project_name}.hex"

recipe.hooks.objcopy.postobjcopy.1.pattern = "{compiler.path}{compiler.cpp.cmd}" -E -P -DOUTPUT_FILE="{build.path}/{build.project_name}.bin" "{variant.path}/loadscript" -o "{build.path}/loadscript"

recipe.size.pattern    = "{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.axf"
recipe.size.regex      = \.text\s+([0-9]+).*
recipe.size.regex.data = ^(?:\.data|\.bss)\s+([0-9]+).*

recipe.output.tmp_file  = {build.project_name}.{build.export_format}
recipe.output.save_file = {build.project_name}.{build.variant}.{build.export_format}


tools.jlink.cmd=jlink
tools.jlink.upload.params.verbose=
tools.jlink.upload.params.quiet=
tools.jlink.upload.pattern="{cmd}" -device {build.device} "{build.path}/loadscript"

tools.pyocd.cmd=pyocd
tools.pyocd.upload.params.verbose=
tools.pyocd.upload.params.quiet=
tools.pyocd.upload.pattern="{cmd}" flash "{build.path}/{build.project_name}.bin"

tools.gdb.cmd=arm-none-eabi-gdb

debug.executable={build.path}/{build.project_name}.axf
debug.toolchain=gcc
debug.toolchain.prefix=arm-none-eabi

debug.server.pyocd.cmd=pyocd

debug.server.jlink.cmd=JLinkGDBServerCL