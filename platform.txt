# Northern Mechatronics ARM Core Platform.
# ------------------------------
#
# For more info:
# https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5-3rd-party-Hardware-specification

name=Northern Mechatronics Boards
version=1.0.0

##################################
#
# paths
#
##################################
cores.path   = {runtime.platform.path}/cores
system.path  = {runtime.platform.path}/system
tools.path   = {runtime.platform.path}/tools
ambiq.path   = {runtime.platform.path}/system/ambiq
cmsis.path   = {runtime.platform.path}/system/CMSIS/5.7.0
variant.path = {build.variant.path}

##################################
#
# defines
#
##################################
defines.arduino = -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_MBED -DARDUINO_ARCH_{build.arch}
defines.variant = {build.defines}
defines.extra   = -DAM_PART_APOLLO3 -DAM_PACKAGE_BGA -DPART_apollo3
defines.all     = {defines.variant} {defines.arduino} {defines.extra} -DCORDIO_ZERO_COPY_HCI

defines.preproc = {defines.all}
defines.asm     = {defines.all}
defines.c       = {defines.all}
defines.cxx     = {defines.all}
defines.ld      = {defines.all}

##################################
#
# includes
#
##################################
includes.core    = {includes} "-I{cores.path}/arduino" "-I{cores.path}/arduino/api"
includes.variant = {build.includes}
includes.ambiq   = "-I{ambiq.path}/inc/apollo3" "-I{ambiq.path}/inc/apollo3/hal" "-I{ambiq.path}/inc/apollo3/regs" "-I{ambiq.path}/inc/utils" 
includes.cmsis   = "-I{cmsis.path}/CMSIS/Include" "-I{cmsis.path}/Device/ARM/apollo3/Include"
includes.all     = {includes.core} {includes.variant} {includes.ambiq} {includes.cmsis}

##################################
#
# libraries
#
##################################
libs.core    = -Wl,--whole-archive "{archive_file_path}" -Wl,--no-whole-archive
libs.variant = -Wl,-L{cmsis.path}/CMSIS/Lib -Wl,-L{variant.path} -Wl,--whole-archive {build.libs} -Wl,--no-whole-archive
libs.ambiq   = -Wl,-L{ambiq.path}/lib -Wl,--whole-archive -lam_hal -Wl,-lam_utils -Wl,--no-whole-archive
libs.all     = {libs.core} {libs.variant} {libs.ambiq}

##################################
#
# warnings
#
##################################
compiler.warning_flags         =
compiler.warning_flags.none    =
compiler.warning_flags.default = -Wall -Werror=return-type
compiler.warning_flags.more    = {compiler.warning_flags.default}
compiler.warning_flags.all     = {compiler.warning_flags.default} -Wextra

##################################
#
# extra flags (can be overridden in platform.local.txt)
#
##################################
compiler.preproc.extra_flags =
compiler.asm.extra_flags     =
compiler.c.extra_flags       =
compiler.cxx.extra_flags     =
compiler.ld.extra_flags      =
compiler.ar.extra_flags      =
compiler.axf2bin.extra_flags =
compiler.axf2hex.extra_flags =

##################################
#
# flags
#
##################################
compiler.preproc.flags = {compiler.cxx.flags} -w -x c++ -E -CC {compiler.preproc.extra_flags}

compiler.asm.flags     = {compiler.asm.extra_flags}

compiler.c.flags       = {compiler.c.extra_flags} -MMD -c -mthumb -mcpu={build.mcu} -mfpu={build.fpu} -mfloat-abi={build.fabi}

compiler.cxx.flags     = {compiler.cxx.extra_flags} -MMD -c -mthumb -mcpu={build.mcu} -mfpu={build.fpu} -mfloat-abi={build.fabi}

compiler.ld.flags      = {compiler.ld.extra_flags} --specs=nano.specs --specs=nosys.specs -lsupc++ -lstdc++ -lm -mthumb -mcpu={build.mcu} -mfpu={build.fpu} -mfloat-abi={build.fabi} -Wl,--gc-sections -Wl,--wrap,_calloc_r -Wl,--wrap,_memalign_r -Wl,--wrap,atexit -Wl,--wrap,exit -Wl,--wrap,fprintf -Wl,--wrap,printf -Wl,--wrap,snprintf -Wl,--wrap,sprintf -Wl,--wrap,vfprintf -Wl,--wrap,vprintf -Wl,--wrap,vsnprintf -Wl,--wrap,vsprintf -Wl,-n

compiler.ar.flags      = rcsP {compiler.ar.extra_flags} {compiler.ar.extra_flags}

compiler.axf2bin.flags = {compiler.axf2bin.extra_flags} {compiler.axf2bin.extra_flags} -O binary

compiler.axf2hex.flags = {compiler.axf2hex.extra_flags} {compiler.axf2hex.extra_flags} -O ihex

##################################
#
# compiler information
#
##################################
compiler.path        = {runtime.tools.arm-none-eabi-gcc-9-2020-q4-update.path}/bin/
compiler.prefix      = arm-none-eabi-
compiler.cpp.cmd     = {compiler.prefix}cpp
compiler.gcc.cmd     = {compiler.prefix}gcc
compiler.gxx.cmd     = {compiler.prefix}g++
compiler.ar.cmd      = {compiler.prefix}ar
compiler.objcopy.cmd = {compiler.prefix}objcopy
compiler.size.cmd    = {compiler.prefix}size

##################################
#
# arduino recipes
#
##################################
recipe.preproc.macros = "{compiler.path}{compiler.gxx.cmd}" {compiler.preproc.flags} {defines.preproc} {includes.all} "{source_file}" -o "{preprocessed_file_path}"

recipe.S.o.pattern    = "{compiler.path}{compiler.gcc.cmd}" {compiler.asm.flags} {defines.asm} {includes.all} "{source_file}" -o "{object_file}"

recipe.c.o.pattern    = "{compiler.path}{compiler.gcc.cmd}" {compiler.c.flags}   {defines.c}   {includes.all} "{source_file}" -o "{object_file}"
 
recipe.cpp.o.pattern  = "{compiler.path}{compiler.gxx.cmd}" {compiler.cxx.flags} {defines.cxx} {includes.all} "{source_file}" -o "{object_file}"

recipe.ar.pattern     = "{compiler.path}{compiler.ar.cmd}"  {compiler.ar.flags} "{archive_file_path}" "{object_file}"

recipe.c.combine.pattern   = "{compiler.path}{compiler.gcc.cmd}" "-T{build.ldscript}" "-Wl,-Map,{build.path}/{build.project_name}.map" -o "{build.path}/{build.project_name}.axf" {object_files} {libs.all} {compiler.ld.flags} {defines.ld}

recipe.objcopy.bin.pattern = "{compiler.path}{compiler.objcopy.cmd}" {compiler.axf2bin.flags} "{build.path}/{build.project_name}.axf" "{build.path}/{build.project_name}.bin"

recipe.objcopy.hex.pattern = "{compiler.path}{compiler.objcopy.cmd}" {compiler.axf2hex.flags} "{build.path}/{build.project_name}.axf" "{build.path}/{build.project_name}.hex"

recipe.hooks.objcopy.postobjcopy.1.pattern = "{compiler.path}{compiler.cpp.cmd}" -E -P -DOUTPUT_FILE="{build.path}/{build.project_name}.bin" "{tools.path}/loadscript" -o "{build.path}/loadscript"

recipe.size.pattern    = "{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.axf"
recipe.size.regex      = \.text\s+([0-9]+).*
recipe.size.regex.data = ^(?:\.data|\.bss)\s+([0-9]+).*

recipe.output.tmp_file  = {build.project_name}.{build.export_format}
recipe.output.save_file = {build.project_name}.{build.variant}.{build.export_format}


tools.jlink.cmd=jlink
tools.jlink.cmd.windows=jlink.exe

tools.jlink.upload.params.verbose=
tools.jlink.upload.params.quiet=
tools.jlink.upload.pattern="{cmd}" -device {build.device} "{build.path}/loadscript"

tools.jlink.program.params.verbose=
tools.jlink.program.params.quiet=
tools.jlink.program.pattern="{cmd}" -device {build.device} "{build.path}/loadscript"
